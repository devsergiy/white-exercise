require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GroupEventsController, type: :controller do
  render_views

  before :each do
    request.env["HTTP_ACCEPT"] = 'application/json'
  end

  # This should return the minimal set of attributes required to create a valid
  # GroupEvent. As you add validations to GroupEvent, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes)   { attributes_for(:group_event) }
  let(:invalid_attributes) { attributes_for(:invalid_event) }

  let(:errors) {{ name: [ "can't be blank"] , description: ["can't be blank"] }}
  let!(:group_event) { create(:group_event) }

  describe "GET #index" do
    it "assigns all group_events as @group_events" do
      get :index
      expect(assigns(:group_events)).to eq([group_event])
      expect(response.body).to eq([event_as_json(group_event, false)].to_json)
    end
  end

  describe "GET #show" do
    it "assigns the requested group_event as @group_event" do
      get :show, {:id => group_event.to_param}
      expect(assigns(:group_event)).to eq(group_event)
      expect(response.body).to eq(event_as_json(group_event))
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new GroupEvent" do
        expect {
          post :create, {:group_event => valid_attributes}
        }.to change(GroupEvent, :count).by(1)
      end

      it "assigns a newly created group_event as @group_event" do
        post :create, {:group_event => valid_attributes}
        expect(assigns(:group_event)).to be_a(GroupEvent)
        expect(assigns(:group_event)).to be_persisted
      end

      it "returns created group_event" do
        post :create, {:group_event => valid_attributes}
        expect(response.body).to eq(event_as_json(GroupEvent.last))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved group_event as @group_event" do
        post :create, {:group_event => invalid_attributes}
        expect(assigns(:group_event)).to be_a_new(GroupEvent)
      end

      it "returns list of errors" do
        post :create, {:group_event => invalid_attributes}
        expect(response.body).to eq(errors.to_json)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_name) { "Holiday"}
      let(:new_attributes) { {name: new_name} }

      it "updates the requested group_event" do
        put :update, {:id => group_event.to_param, :group_event => new_attributes}
        group_event.reload
        expect(group_event.name).to eq(new_name)
        expect(response.body).to eq(event_as_json(group_event))
      end

      it "assigns the requested group_event as @group_event" do
        put :update, {:id => group_event.to_param, :group_event => valid_attributes}
        expect(assigns(:group_event)).to eq(group_event)
      end

      it "returns group_event" do
        put :update, {:id => group_event.to_param, :group_event => valid_attributes}
        expect(response.body).to eq(event_as_json(group_event))
      end
    end

    context "with invalid params" do
      it "assigns the group_event as @group_event" do
        put :update, {:id => group_event.to_param, :group_event => invalid_attributes}
        expect(assigns(:group_event)).to eq(group_event)
      end


      it "returns errors" do

        put :update, {:id => group_event.to_param, :group_event => invalid_attributes}
        expect(response.body).to eq(errors.to_json)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested group_event" do
      expect {
        delete :destroy, {:id => group_event.to_param}
      }.to change(GroupEvent, :count).by(-1)
    end

    it "returns group_events list" do
      delete :destroy, {:id => group_event.to_param}
      expect(response).to have_http_status(204)
    end
  end
end
